from pyrogram import Client, filters
from pyrogram.errors import FloodWait
import requests
from pyrogram.types import Message

from bs4 import BeautifulSoup
from pyrogram.types import ChatPermissions
import subprocess
import time
from time import sleep
import random
import random
import asyncio

from dotenv import load_dotenv
import os


from pyrogram.raw.types import InputFile

from pyrogram import Client


from openai import OpenAI
from pyrogram import Client, filters
from pyrogram.types import Message

load_dotenv()

api_id = os.getenv("API_ID")
api_hash = os.getenv("API_HASH")
token_qwen_3_test = os.getenv("TOKEN_QWEN_3_TEST")

app = Client(
    "my_account",
    api_id=api_id,
    api_hash=api_hash
)

# –ö–æ–º–∞–Ω–¥–∞ type
@app.on_message(filters.command("type", prefixes=".") & filters.me)
def type(_, msg):
    orig_text = msg.text.split(".type ", maxsplit=1)[1]
    text = orig_text
    tbp = "" # to be printed
    typing_symbol = "‚ñí"
    while(tbp != orig_text):
        try:
            msg.edit(tbp + typing_symbol)
            sleep(0.01) # 50 ms

            tbp = tbp + text[0]
            text = text[1:]

            msg.edit(tbp)
            sleep(0.01)

        except FloodWait as e:
            sleep(e.x)

R = "‚ù§Ô∏è"
W = "ü§ç"

chlen_list = [
    W * 9,
    W * 3 + R * 3 + W * 3,
    W * 2 + R * 5 + W * 2,
    W * 2 + R * 5 + W * 2,
    W * 2 + R * 5 + W * 2,
    W * 3 + R * 3 + W * 3,
    W * 3 + R * 3 + W * 3,
    W * 3 + R * 3 + W * 3,
    W * 3 + R * 3 + W * 3,
    W * 3 + R * 3 + W * 3,
    W * 3 + R * 3 + W * 3,
    W * 3 + R * 3 + W * 3,
    W * 3 + R * 3 + W * 3,
    W * 2 + R * 5 + W * 2,
    W + R * 7 + W,
    W + R * 7 + W,
    W + R * 7 + W,
    W + R * 7 + W,
    W * 2 + R * 2 + W + R * 2 + W * 2,
    W * 9,
]


heart_list = [
    W * 9,
    W * 2 + R * 2 + W + R * 2 + W * 2,
    W + R * 7 + W,
    W + R * 7 + W,
    W + R * 7 + W,
    W * 2 + R * 5 + W * 2,
    W * 3 + R * 3 + W * 3,
    W * 4 + R + W * 4,
    W * 9,
]

joined_heart = "\n".join(heart_list)
joined_chlen = "\n".join(chlen_list)

heartlet_len = joined_heart.count(R)
joined_chlen_len = joined_chlen.count(R)
SLEEP = 0.1


async def _wrap_edit(message: Message, text: str):
    """Floodwait-safe utility wrapper for edit"""
    try:
        await message.edit(text)
    except FloodWait as fl:
        await asyncio.sleep(fl.x * 2)


@app.on_message(filters.command("hack", prefixes=".") & filters.me)
def hack(_, msg):
    perc = 0

    while(perc < 100):
        try:
            text = "üëÆ‚Äç –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ..." + str(perc) + "%"
            msg.edit(text)

            perc += random.randint(1, 3)
            sleep(0.1)

        except FloodWait as e:
            sleep(e.x)

    msg.edit("üü¢ –ü–µ–Ω—Ç–∞–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!")
    sleep(3)

    msg.edit("üëΩ –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ù–õ–û ...")
    perc = 0

    while(perc < 100):
        try:
            text = "üëΩ –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ù–õ–û ..." + str(perc) + "%"
            msg.edit(text)

            perc += random.randint(1, 5)
            sleep(0.15)

        except FloodWait as e:
            sleep(e.x)

    msg.edit("ü¶ñ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –Ω–∞ –∑–µ–º–ª–µ!")

@app.on_message(filters.command("voice", prefixes=".") & filters.me)
async def send_voice(_, message):

    audio_path = "brainrot_reference.ogg"
    await app.send_voice(
        chat_id=message.chat.id,
        voice=audio_path,
        caption="üé§ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_to_message_id=message.id
    )
    await message.delete()

@app.on_message(filters.command("circle", prefixes=".") & filters.me)
async def send_circle(_, message: Message):
    video_path = "final_video_with_subtitles.mp4"  # —É–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
    try:
        with open(video_path, "rb") as f:
            await app.send_video_note(
                chat_id=message.chat.id,
                video_note=video_path,
                reply_to_message_id=message.id
            )
        await message.delete()
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—Ä—É–∂–æ—á–∫–∞: {e}")



# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter
client = OpenAI(
    base_url="https://openrouter.ai/api/v1/",
    api_key=token_qwen_3_test,
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —É–º–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI, –æ–±—ä—è—Å–Ω—è—é—â–∏–π –≤–µ—â–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
)

@app.on_message(filters.command("askq", prefixes=".") & filters.me)
async def ask_openrouter(_, message: Message):
    user_prompt = " ".join(message.command[1:])
    if not user_prompt:
        await message.edit("‚ùó –í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ `.askq`")
        return

    await message.edit("üß† –î—É–º–∞—é...")

    completion = client.chat.completions.create(
        model="qwen/qwen3-30b-a3b:free",  # –∏–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, "openai/gpt-4o"
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_prompt}
        ],
    )
    answer = completion.choices[0].message.content
    await message.edit(answer)


app.run()
